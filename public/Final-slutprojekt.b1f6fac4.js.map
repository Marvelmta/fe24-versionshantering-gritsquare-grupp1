{"mappings":"ACAA,SAAS,gBAAgB,CAAC,mBAAoB,KAE1C,IAAM,EAAkB,SAAS,aAAa,CAAC,MAC/C,CAAA,EAAgB,SAAS,CAAG,mBAG5B,IAAM,EAAc,SAAS,aAAa,CAAC,QAC3C,CAAA,EAAY,IAAI,CAAG,OACnB,EAAY,EAAE,CAAG,gBACjB,EAAY,WAAW,CAAG,2CAG1B,IAAM,EAAa,SAAS,aAAa,CAAC,IAC1C,CAAA,EAAW,SAAS,CAAG,4BAGvB,EAAgB,WAAW,CAAC,GAC5B,EAAgB,WAAW,CAAC,GAG5B,IAAM,EAAgB,SAAS,aAAa,CAAC,kBA8C7C,SAAS,IACD,SAAS,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,aACjC,EAAgB,SAAS,CAAC,GAAG,CAAC,aAE9B,EAAgB,SAAS,CAAC,MAAM,CAAC,YAEzC,CAnDA,EAAc,UAAU,CAAC,YAAY,CAAC,EAAiB,EAAc,WAAW,EAGhF,EAAY,gBAAgB,CAAC,QAG7B,WACI,IAAM,EAAa,EAAY,KAAK,CAAC,WAAW,GAAG,IAAI,GACjD,EAAc,SAAS,gBAAgB,CAAC,iBAG9C,GAAI,CAAC,EAAY,CACb,EAAY,OAAO,CAAC,AAAA,IAChB,EAAQ,KAAK,CAAC,OAAO,CAAG,OAC5B,GACA,MACJ,CAGA,EAAY,OAAO,CAAC,AAAA,IAEZ,AADgB,EAAQ,WAAW,CAAC,WAAW,GACnC,QAAQ,CAAC,GACrB,EAAQ,KAAK,CAAC,OAAO,CAAG,QAExB,EAAQ,KAAK,CAAC,OAAO,CAAG,MAEhC,GAGA,IAAM,EAAe,MAAM,IAAI,CAAC,GAAa,MAAM,CAC/C,AAAA,GAAO,AAAsB,SAAtB,EAAI,KAAK,CAAC,OAAO,EAC1B,MAAM,CAGJ,EAAoB,SAAS,cAAc,CAAC,qBAC3C,IAED,AADA,CAAA,EAAoB,SAAS,aAAa,CAAC,MAA3C,EACkB,EAAE,CAAG,oBACvB,EAAgB,WAAW,CAAC,IAGhC,EAAkB,WAAW,CAAG,CAAC,MAAM,EAAE,EAAa,QAAQ,EAAE,AAAiB,IAAjB,EAAqB,IAAM,GAAA,CAAI,AACnG,GAYA,IAGA,IAAM,EAAiB,SAAS,cAAc,CAAC,kBAC3C,GACA,EAAe,gBAAgB,CAAC,QAAS,KAErC,WAAW,EAAmB,GAClC,EAER","sources":["<anon>","js/search.js"],"sourcesContent":["var $ad1ba05b7cbb749b$exports = {};\ndocument.addEventListener('DOMContentLoaded', ()=>{\n    // Create search container\n    const searchContainer = document.createElement('div');\n    searchContainer.className = 'search-container';\n    // Create search input\n    const searchInput = document.createElement('input');\n    searchInput.type = 'text';\n    searchInput.id = 'messageSearch';\n    searchInput.placeholder = 'Search by username or message content...';\n    // Create search icon\n    const searchIcon = document.createElement('i');\n    searchIcon.className = 'fas fa-search search-icon';\n    // Append search elements to container\n    searchContainer.appendChild(searchIcon);\n    searchContainer.appendChild(searchInput);\n    // Insert search container after the form container\n    const formContainer = document.querySelector('.formContainer');\n    formContainer.parentNode.insertBefore(searchContainer, formContainer.nextSibling);\n    // Add event listener for search input\n    searchInput.addEventListener('input', filterMessages);\n    // Function to filter messages\n    function filterMessages() {\n        const searchTerm = searchInput.value.toLowerCase().trim();\n        const allMessages = document.querySelectorAll('.message-item');\n        // If search term is empty, show all messages\n        if (!searchTerm) {\n            allMessages.forEach((message)=>{\n                message.style.display = 'block';\n            });\n            return;\n        }\n        // Filter messages\n        allMessages.forEach((message)=>{\n            const messageText = message.textContent.toLowerCase();\n            if (messageText.includes(searchTerm)) message.style.display = 'block';\n            else message.style.display = 'none';\n        });\n        // Add indicator of how many messages are visible\n        const visibleCount = Array.from(allMessages).filter((msg)=>msg.style.display !== 'none').length;\n        // Update or create search results count element\n        let searchResultCount = document.getElementById('searchResultCount');\n        if (!searchResultCount) {\n            searchResultCount = document.createElement('div');\n            searchResultCount.id = 'searchResultCount';\n            searchContainer.appendChild(searchResultCount);\n        }\n        searchResultCount.textContent = `Found ${visibleCount} message${visibleCount !== 1 ? 's' : ''}`;\n    }\n    // Check if dark mode is active and apply styles accordingly\n    function updateSearchTheme() {\n        if (document.body.classList.contains('dark-mode')) searchContainer.classList.add('dark-mode');\n        else searchContainer.classList.remove('dark-mode');\n    }\n    // Initial theme check\n    updateSearchTheme();\n    // Listen for dark mode changes\n    const darkModeToggle = document.getElementById('darkModeToggle');\n    if (darkModeToggle) darkModeToggle.addEventListener('click', ()=>{\n        // Small delay to ensure the body class has been updated\n        setTimeout(updateSearchTheme, 10);\n    });\n});\n\n\n//# sourceMappingURL=Final-slutprojekt.b1f6fac4.js.map\n","document.addEventListener('DOMContentLoaded', () => {\n    // Create search container\n    const searchContainer = document.createElement('div');\n    searchContainer.className = 'search-container';\n    \n    // Create search input\n    const searchInput = document.createElement('input');\n    searchInput.type = 'text';\n    searchInput.id = 'messageSearch';\n    searchInput.placeholder = 'Search by username or message content...';\n    \n    // Create search icon\n    const searchIcon = document.createElement('i');\n    searchIcon.className = 'fas fa-search search-icon';\n    \n    // Append search elements to container\n    searchContainer.appendChild(searchIcon);\n    searchContainer.appendChild(searchInput);\n    \n    // Insert search container after the form container\n    const formContainer = document.querySelector('.formContainer');\n    formContainer.parentNode.insertBefore(searchContainer, formContainer.nextSibling);\n    \n    // Add event listener for search input\n    searchInput.addEventListener('input', filterMessages);\n    \n    // Function to filter messages\n    function filterMessages() {\n        const searchTerm = searchInput.value.toLowerCase().trim();\n        const allMessages = document.querySelectorAll('.message-item');\n        \n        // If search term is empty, show all messages\n        if (!searchTerm) {\n            allMessages.forEach(message => {\n                message.style.display = 'block';\n            });\n            return;\n        }\n        \n        // Filter messages\n        allMessages.forEach(message => {\n            const messageText = message.textContent.toLowerCase();\n            if (messageText.includes(searchTerm)) {\n                message.style.display = 'block';\n            } else {\n                message.style.display = 'none';\n            }\n        });\n        \n        // Add indicator of how many messages are visible\n        const visibleCount = Array.from(allMessages).filter(\n            msg => msg.style.display !== 'none'\n        ).length;\n        \n        // Update or create search results count element\n        let searchResultCount = document.getElementById('searchResultCount');\n        if (!searchResultCount) {\n            searchResultCount = document.createElement('div');\n            searchResultCount.id = 'searchResultCount';\n            searchContainer.appendChild(searchResultCount);\n        }\n        \n        searchResultCount.textContent = `Found ${visibleCount} message${visibleCount !== 1 ? 's' : ''}`;\n    }\n    \n    // Check if dark mode is active and apply styles accordingly\n    function updateSearchTheme() {\n        if (document.body.classList.contains('dark-mode')) {\n            searchContainer.classList.add('dark-mode');\n        } else {\n            searchContainer.classList.remove('dark-mode');\n        }\n    }\n    \n    // Initial theme check\n    updateSearchTheme();\n    \n    // Listen for dark mode changes\n    const darkModeToggle = document.getElementById('darkModeToggle');\n    if (darkModeToggle) {\n        darkModeToggle.addEventListener('click', () => {\n            // Small delay to ensure the body class has been updated\n            setTimeout(updateSearchTheme, 10);\n        });\n    }\n});"],"names":["document","addEventListener","searchContainer","createElement","className","searchInput","type","id","placeholder","searchIcon","appendChild","formContainer","querySelector","updateSearchTheme","body","classList","contains","add","remove","parentNode","insertBefore","nextSibling","searchTerm","value","toLowerCase","trim","allMessages","querySelectorAll","forEach","message","style","display","messageText","textContent","includes","visibleCount","Array","from","filter","msg","length","searchResultCount","getElementById","darkModeToggle","setTimeout"],"version":3,"file":"Final-slutprojekt.b1f6fac4.js.map"}